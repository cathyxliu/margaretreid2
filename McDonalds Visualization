#uses API Key, most is copy paste from lectue, but its now keyed to your data, for just the graph, you need lines 3-62 and 89-108 

!pip install -r requirements.txt
!pip install cufflinks

user = "tyler"
apikey = {'tyler':"khbVdWdc5wfLYOMDftgM7jfTpihpDdtEuGmzud98"}

SHEETs = [
          ("https://docs.google.com/spreadsheet/ccc?key=1-HmVqKjQL5eSxb4Jq5RI8kqvBFyLeP-sxOhxvK-K6Io","McDonalds Compiled"), 
         ]
         
import pandas as pd
from eep153_tools import read_sheets

df = pd.concat([read_sheets(spreadsheet,json_creds=serviceacct[user],sheet=sheet) for spreadsheet, sheet in SHEETs],
               ignore_index=True,sort=False)


import fooddatacentral as fdc

D = {}
count = 0
for food in  df.Food.tolist():
    try:
        FDC = df.loc[df.Food==food,:].FDC[count]
        count+=1
        D[food] = fdc.nutrients(apikey[user],FDC).Quantity
    except AttributeError: 
        warnings.warn("Couldn't find FDC Code %s for food %s." % (food,FDC))        

FoodNutrients = pd.DataFrame(D,dtype=float)

df['FDC Quantity'] = df[['Quantity','Units']].T.apply(lambda x : fdc.units(x['Quantity'],x['Units']))
df['FDC Price'] = df['Price']/df['FDC Quantity']
df.dropna(how='any') # Drop food with any missing data
Prices = df.groupby('Food',sort=False)['FDC Price'].min()


from eep153_tools import read_sheets

DRIs = "https://docs.google.com/spreadsheets/d/1y95IsQ4HKspPW3HHDtH7QMtlDA66IUsCHJLutVL-MMc/"
diet_min = read_sheets(DRIs,json_creds=serviceacct[user],sheet='diet_minimums').set_index('Nutrition')
diet_max = read_sheets(DRIs,json_creds=serviceacct[user],sheet='diet_maximums').set_index('Nutrition')

from  scipy.optimize import linprog as lp
import numpy as np

def solve_subsistence_problem(FoodNutrients,Prices,diet_min,diet_max,tol=1e-6):
    c = Prices.apply(lambda x:x.magnitude).dropna()
    use = list(set(c.index.tolist()).intersection(FoodNutrients.columns.tolist()))
    c = c[use]
    Aall = FoodNutrients[c.index].fillna(0)
    Amin = Aall.loc[diet_min.index]
    Amax = Aall.loc[diet_max.index]
    A = pd.concat([Amin,-Amax])
    b = pd.concat([diet_min,-diet_max]) 
    result = lp(c, -A, -b, method='interior-point')
    result.A = A
    result.b = b
    result.diet = pd.Series(result.x,index=c.index)
    return result
    

#below is a minimum cost diet function keyed to the FDC data, don't know if you want it or not, it ends on line 85
group = 'F 31-50'
tol = 1e-6

result = solve_subsistence_problem(FoodNutrients,Prices,diet_min[group],diet_max[group],tol=tol)

print("Cost of diet for %s is $%4.2f per day.\n" % (group,result.fun))
diet = result.diet

print("\nDiet (in 100s of grams or milliliters):")
print(diet[diet >= tol]) 
print()

tab = pd.DataFrame({"Outcome":np.abs(result.A).dot(diet),"Recommendation":np.abs(result.b)})
print("\nWith the following nutritional outcomes of interest:")
print(tab)
print()

print("\nConstraining nutrients are:")
excess = tab.diff(axis=1).iloc[:,1]
print(excess.loc[np.abs(excess) < tol*100].index.tolist())


#Actual graph is here
import cufflinks as cf
cf.go_offline()

scale = [.5,.6,.7,.8,.9,1.,1.1,1.2,1.3,1.4,1.5]
scale = [.5,1,2]

cost0 = solve_subsistence_problem(FoodNutrients,Prices,diet_min[group],diet_max[group],tol=tol).fun

Price_response={}
for s in scale:
    cost = {}
    for i,p in enumerate(Prices):
        my_p = Prices.copy()
        my_p[i] = p*s
        result = solve_subsistence_problem(FoodNutrients,my_p,diet_min[group],diet_max[group],tol=tol)
        cost[Prices.index[i]] = np.log(result.fun/cost0)
    Price_response[np.log(s)] = cost

Price_response = pd.DataFrame(Price_response).T
Price_response.iplot(xTitle='log price change',yTitle='log cost change')
